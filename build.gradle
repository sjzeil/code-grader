plugins {
    id 'java'
    id 'application'
	id 'project-report'
	id 'checkstyle'
	id "com.github.spotbugs" version "5.0.8"
	id 'org.jbake.site' version "5.3.0"
	id 'edu.odu.cs.report_accumulator' version '1.3'
}

version = '1.0-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.toVersion(11)
	targetCompatibility = JavaVersion.toVersion(11)
}

application {
    mainModule = 'odu.edu.cs.zeil.codegrader' // name defined in module-info.java
    mainClass = 'odu.edu.cs.zeil.codegrader.cli.RunTests'
}

repositories {
        ivy { // Use my own CS dept repo
            url 'https://www.cs.odu.edu/~zeil/ivyrepo'
        }
		mavenCentral()
}


dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.3'
    implementation 'org.apache.logging.log4j:log4j-api:2.13.3'
    implementation 'org.apache.logging.log4j:log4j-core:2.13.3'
    implementation 'com.opencsv:opencsv:5.6'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.3'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
	    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

application {
    mainClassName = 'odu.edu.cs.zeil.codegrader.cli.RunTests'
}

test {
	ignoreFailures = true
    useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}


jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes 'Implementation-Title': 'code-grader',
           'Implementation-Version': '1.0',
            'Main-Class': 'edu.odu.cs.zeil.codegrader.cli.RunTests'
    }
    from { configurations.runtimeClasspath.collect {
         it.isDirectory() ? it : zipTree(it) } }
}


// Could this be useful in making IDEs work
// when module-info is in place?
task buildLib (type: Copy) {
    from configurations.testRuntimeClasspath
    into 'lib'
}



// Reporting


checkstyle {
    ignoreFailures = true
    showViolations = false
}

tasks.withType(Checkstyle) {
  reports {
    html.destination project.file("build/reports/checkstyle/main.html")
  }
}


checkstyleTest.enabled = false
check.dependsOn htmlDependencyReport

task reports (dependsOn: ['htmlDependencyReport', 'javadoc', 'check', 'site']) {
    description 'Generate all reports for this project'
}

javadoc.failOnError=false

spotbugsMain {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    reports {
       xml.enabled = false
       html.enabled = true
    }
}

spotbugsTest.enabled = false



reportStats.reportsURL = 'https://www.cs.odu.edu/~zeil/gitlab/' + "bcratchit" + '/reports'
deployReports.deployDestination = 'rsync://zeil@atria.cs.odu.edu:bcratchit/reports/'




task copyJDocs (type: Copy) {
    from 'build/docs'
    into 'build/reports'
    dependsOn 'javadoc'
}


jbake {
	 srcDirName = "src/main/jbake/"
}

task copyBake (type: Copy) {
    from 'build/jbake'
    into 'build/reports'
    dependsOn 'bake'
}



task site (dependsOn: ['copyBake', 'copyJDocs']){
    description "Build the project website (in build/reports)"
    group "reporting"
}
