plugins {
    id 'java'
    id 'application'
	id 'project-report'
	id 'checkstyle'
	id "com.github.spotbugs" version "5.0.8"
	id 'org.jbake.site' version "5.3.0"
	id 'edu.odu.cs.report_accumulator' version '1.4'
    id 'org.ajoberstar.git-publish' version '4.2.0'
    id 'maven-publish'
}

java {
	    sourceCompatibility = JavaVersion.toVersion(11)
	    targetCompatibility = JavaVersion.toVersion(11)
}


application {
    mainModule = 'odu.edu.cs.zeil.codegrader' // name defined in module-info.java
    mainClass = 'odu.edu.cs.zeil.codegrader.cli.RunTests'
}



dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.3'
    implementation 'org.apache.logging.log4j:log4j-api:2.13.3'
    implementation 'org.apache.logging.log4j:log4j-core:2.13.3'
    implementation 'com.opencsv:opencsv:5.6'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.3'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.3'
    implementation 'commons-cli:commons-cli:1.5.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

application {
    mainClassName = 'odu.edu.cs.zeil.codegrader.cli.RunTests'
}


tasks.withType(Test) {
	ignoreFailures = true
    useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}


jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes 'Implementation-Title': 'code-grader',
           'Implementation-Version': '1.0',
            'Main-Class': 'edu.odu.cs.zeil.codegrader.cli.RunTests'
		}
}


// Could this be useful in making IDEs work
// when module-info is in place?
task buildLib (type: Copy) {
    from configurations.testRuntimeClasspath
    into 'lib'
}



// Reporting


checkstyle {
    ignoreFailures = true
    showViolations = false
}

tasks.withType(Checkstyle) {
  reports {
    html.destination project.file("build/reports/checkstyle/main.html")
  }
}


checkstyleTest.enabled = false
check.dependsOn htmlDependencyReport

task reports (dependsOn: ['htmlDependencyReport', 'javadoc', 'check']) {
    description 'Generate all reports for this project'
}

javadoc.failOnError=false

spotbugsMain {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    reports {
       xml.enabled = false
       html.enabled = true
    }
}

spotbugsTest.enabled = false


task copyJDocs (type: Copy) {
    from 'build/docs'
    into 'build/reports'
    dependsOn 'javadoc'
}


jbake {
	 srcDirName = "src/main/jbake/"
}

task copyBake (type: Copy) {
    from 'build/jbake'
    into 'build/reports'
    dependsOn 'bake'
}

/*
task copyJar (type: Copy) {
    from 'build/libs'
    into 'build/reports/lib'
    rename { String fileName ->
        fileName.replace("-$project.version", "")
    }
    dependsOn 'jar'
}
*/


import edu.odu.cs.zeil.report_accumulator.ReportStats


task collectStats (type: ReportStats, dependsOn: ['build','htmlDependencyReport', 'check', 'copyJDocs', 'copyBake']) {
    description "Collect statistics from various reports & analysis tools"
    reportsURL = 'https://sjzeil.github.io/code-grader/'
    htmlSourceDir = file("build/jbake")
}


task site (dependsOn: ['copyJDocs', 'collectStats' , 'copyBake']){
    description "Build the project website (in build/reports)"
    group "reporting"
}


if (!project.hasProperty("ivyRepoUser")) {
    ext.ivyRepoUser = "bogus"
}
if (!project.hasProperty("ivyRepoPass")) {
    ext.ivyRepoPass = "bogus"
}


////////  Website publication on GitHub pages ///////////////////


task deploySite (type: Delete, dependsOn: 'gitPublishPush') {
    group = "Reporting"
    description  'Commit and push website changes to GitHub'
    delete pagesDir
}

////  Publication of website to GitHub

gitPublishCopy.dependsOn site
gitPublish {
    // where to publish to (repo must exist)
    repoUri = 'git@github.com:sjzeil/code-grader.git'

    // where to fetch from prior to fetching from the remote (i.e. a local repo to save time)
    //referenceRepoUri = 'file://..'

    // branch will be created if it doesn't exist
    branch = 'gh-pages'
  
    // if set, a shallow clone will be performed instead of pulling all history
    fetchDepth = null

    // generally, you don't need to touch this
    //repoDir = file("$buildDir/somewhereelse") // defaults to $buildDir/gitPublish

    // what to publish, this is a standard CopySpec
    contents {
        from 'build/reports'
    }

    // what to keep in the existing branch (include=keep)
    /*
    preserve {
        include '1.0.0/**'
        exclude '1.0.0/temp.txt'
    }
    */

    // message used when committing changes
    commitMessage = 'Publishing website' // defaults to 'Generated by gradle-git-publish'
    
    // for signing commits, omit to use the default from your gitconfig
    sign = false
}